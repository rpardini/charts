{{- if .Values.deploy }}
{{- $_ := set .Values.dhcp "syslogIp" (default .Values.publicIP .Values.dhcp.syslogIp) }}
{{- $_ := set .Values.dhcp "ipForPacket" (default .Values.publicIP .Values.dhcp.ipForPacket) }}
{{- $_ := set .Values.dhcp "tftpIp" (default .Values.publicIP .Values.dhcp.tftpIp) }}
{{- $_ := set .Values.dhcp.httpIPXE.binaryUrl "host" (default .Values.publicIP .Values.dhcp.httpIPXE.binaryUrl.host) }}
{{- $_ := set .Values.dhcp.httpIPXE.scriptUrl "host" (default .Values.publicIP .Values.dhcp.httpIPXE.scriptUrl.host) }}
{{- $_ := set .Values.http.tinkServer "ip" (default .Values.publicIP .Values.http.tinkServer.ip) }}
{{- $_ := set .Values.http.osieUrl "host" (default .Values.publicIP .Values.http.osieUrl.host) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.name }}
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
      stack: tinkerbell
      {{- with .Values.selector }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  strategy:
    type: {{ .Values.deployment.strategy.type }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
        stack: tinkerbell
        {{- with .Values.selector }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector: 
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - image: {{ .Values.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          args:
            - -log-level={{ .Values.logLevel }}
            - -tink-server={{ printf "%v:%v" .Values.http.tinkServer.ip .Values.http.tinkServer.port }}
            - -tink-server-tls={{ .Values.http.tinkServer.tls }}
            - -tink-server-insecure-tls={{ .Values.http.tinkServer.insecureTLS }}
            - -osie-url={{include "urlJoiner" (dict "urlDict" .Values.http.osieUrl)}}
            - -backend-kube-namespace={{ .Release.Namespace }}
            - -extra-kernel-args={{ join " " ( append .Values.http.additionalKernelArgs ( printf "tink_worker_image=%s" ( required "missing tinkWorkerImage" .Values.tinkWorkerImage ) ) ) }}
            - -http-ipxe-binary-enabled={{ .Values.http.ipxeBinaryEnabled }}
            - -http-ipxe-script-enabled={{ .Values.http.ipxeScriptEnabled }}
            - -dhcp-enabled={{ .Values.dhcp.enabled }}
            - -syslog-enabled={{ .Values.syslog.enabled }}
            - -tftp-enabled={{ .Values.tftp.enabled }}
            - -tftp-timeout={{ .Values.tftp.timeout }}
            - -trusted-proxies={{ required "missing trustedProxies" ( join "," .Values.trustedProxies ) }}
            {{- if .Values.autoAddressingHostNetwork }}
            - -http-port={{ printf "%v" .Values.http.port }}
            - -dhcp-http-ipxe-script-port={{ printf "%v" .Values.http.port }}
            - -dhcp-http-ipxe-binary-port={{ printf "%v" .Values.http.port }}
            {{- else }}
            # @TODO: those are old and need review, as ports have been split-off into their own arguments
            - -dhcp-addr={{ printf "%v:%v" .Values.dhcp.ip .Values.dhcp.port }}
            - -dhcp-http-ipxe-binary-url={{include "urlJoiner" (dict "urlDict" .Values.dhcp.httpIPXE.binaryUrl)}}
            - -dhcp-http-ipxe-script-url={{include "urlJoiner" (dict "urlDict" .Values.dhcp.httpIPXE.scriptUrl)}}
            - -dhcp-ip-for-packet={{ .Values.dhcp.ipForPacket }}
            - -dhcp-syslog-ip={{ .Values.dhcp.syslogIp }}
            - -dhcp-tftp-ip={{ .Values.dhcp.tftpIp }}:69
            - -http-addr={{ printf "%v:%v" .Values.http.ip .Values.http.port }}
            - -syslog-addr={{ printf "%v:%v" .Values.syslog.ip .Values.syslog.port }}
            - -ipxe-script-patch={{ .Values.ipxeScriptPatch }}
            - -tftp-addr={{ printf "%v:%v" .Values.tftp.ip .Values.tftp.port }}
            {{- end }}
          {{- range .Values.additionalArgs }}
            - {{ . }}
          {{- end }}
          env:
            {{- range .Values.additionalEnv }}
            - name: {{ .name | quote }}
              value: {{ .value | quote }}
            {{- end }}
          {{- if not .Values.hostNetwork }}
          ports:
            {{- include "smee.ports" ( merge ( dict "PortKey" "containerPort" ) .Values  ) | indent 12 }}
          {{- end }}
          name: {{ .Values.name }}
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
          {{- with .Values.additionalVolumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.additionalVolumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.name }}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      {{- end }}
      {{- if .Values.singleNodeClusterConfig.controlPlaneTolerationsEnabled }}
      tolerations:
      {{- include "singleNodeClusterConfig" . | indent 6 }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          {{- include "preferWorkerNodes" (dict "nodeAffinityWeight" .Values.singleNodeClusterConfig.nodeAffinityWeight) | indent 10 }}
      {{- end }}
{{- end }}
