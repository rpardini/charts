stack:
  stack:
    relay:
      macvlanIntfNumber: "66" # string! So it does not keep changing every deploy
    loadBalancerIP: 192.168.66.75 # MUST be set
    hook:
      downloadEnabled: false # This chart does its own download jobs, but we count on stack chart's nginx to serve them
  hegel:
    trustedProxies: [ "0.0.0.0/0" ] # Trust _all_ proxies, insecure
  smee:
    trustedProxies: [ "0.0.0.0/0" ] # Trust _all_ proxies, insecure
    publicIP: 192.168.66.75 # Must be set
    image: quay.io/tinkerbellrpardini/smee:latest-rpardini # custom build with updated ipxedust and arm64 NAPNULL for u-boot's PXE-via-EFI
    imagePullPolicy: Always # I re-push it there sometimes
  tink:
    controller:
      image: quay.io/tinkerbell/tink-controller:latest # make sure we work with latest version
      imagePullPolicy: Always
    server:
      image: quay.io/tinkerbell/tink:latest # to make sure we work with the la
      imagePullPolicy: Always

actions:
  repository: "quay.io/tinkerbellrpardini/actions"
  version: "latest"

# Generates download jobs and configs for easy show-off'ing of Tinkerbell on diverse hardware
provision:
  # @TODO: many simultaneous download jobs can drive an SD-card/low-bandwidth cluster to its knees. Consider a single download job for all
  
  common:
    # Used together with downloadFile field in each hook; @TODO: can be overriden by using downloadURL field in each hook
    # Check https://github.com/rpardini/tinkerbell-hook/releases/ for updates
    hookDownloadBaseURL: "https://github.com/rpardini/tinkerbell-hook/releases/download/20240325-1738/"
    hookDownloadId: "20240325-1738" # If the ID changes, all hooks will be re-downloaded. Can't contain slashes or spaces
  
  # Define one key per hook built to be downloaded and made available. Those _must_ match the hardware definitions
  hook:
    "default-hook-amd64":
      enabled: true
      arch: "x86_64"
      downloadFile: "hook-x86_64.tar.gz"
      kernel: "vmlinuz-x86_64"
      initrd: "initramfs-x86_64"
      kernelCommandLine: ""
      bootMode: kexec

    "default-hook-aarch64":
      enabled: true
      arch: "aarch64"
      downloadFile: "hook-aarch64.tar.gz"
      kernel: "vmlinuz-aarch64"
      initrd: "initramfs-aarch64"
      kernelCommandLine: ""
      bootMode: kexec # kexec is no-go here, kernel problem? (persists after enabling CONFIG_KEXEC & trying to fix TB action)

    "armbian-uefi-x86-edge":
      enabled: true
      arch: "x86_64"
      downloadFile: "hook-armbian-uefi-x86-edge.tar.gz"
      kernel: "vmlinuz-armbian-uefi-x86-edge"
      initrd: "initramfs-armbian-uefi-x86-edge"
      kernelCommandLine: "intel_iommu=on iommu=pt"
      bootMode: kexec
    
    
    "armbian-uefi-arm64-edge":
      enabled: true
      arch: "aarch64"
      downloadFile: "hook-armbian-uefi-arm64-edge.tar.gz"
      kernel: "vmlinuz-armbian-uefi-arm64-edge"
      initrd: "initramfs-armbian-uefi-arm64-edge"
      kernelCommandLine: ""
      bootMode: kexec # still no go with kexec -- this is a TB action problem for sure, not kernel problem
    
    "armbian-meson64-edge":
      enabled: true
      arch: "aarch64"
      downloadFile: "hook-armbian-meson64-edge.tar.gz"
      kernel: "vmlinuz-armbian-meson64-edge"
      initrd: "initramfs-armbian-meson64-edge"
      kernelCommandLine: "acpi=off efi=noruntime"
      bootMode: reboot
    
    "armbian-rockchip64-edge":
      enabled: true
      arch: "aarch64"
      downloadFile: "hook-armbian-rockchip64-edge.tar.gz"
      kernel: "vmlinuz-armbian-rockchip64-edge"
      initrd: "initramfs-armbian-rockchip64-edge"
      kernelCommandLine: "" # "acpi=off efi=noruntime"
      bootMode: reboot
    
    "armbian-bcm2711-current":
      enabled: true
      arch: "aarch64"
      downloadFile: "hook-armbian-bcm2711-current.tar.gz"
      kernel: "vmlinuz-armbian-bcm2711-current"
      initrd: "initramfs-armbian-bcm2711-current"
      kernelCommandLine: "" # "acpi=off efi=noruntime"
      bootMode: reboot
  
  
  
  
  # Define deployment images; we've a few examples using Ubuntu and Armbian
  images:
    "ubuntu-jammy-cloud-arm64":
      enabled: true
      arch: "aarch64"
      downloadURL: "https://cloud-images.ubuntu.com/daily/server/jammy/current/jammy-server-cloudimg-arm64.img"
      image: "jammy-server-cloudimg-arm64.raw.gz"
      conversion: "qemu-to-raw-gzip"
      doGrowPart: true
      doUserAndSshSetup: true
      rootfsPartitionNumber: "1" # must be a string

    "ubuntu-jammy-cloud-amd64":
      enabled: true
      arch: "x86_64"
      downloadURL: "https://cloud-images.ubuntu.com/daily/server/jammy/current/jammy-server-cloudimg-amd64.img"
      conversion: "qemu-to-raw-gzip"
      image: "jammy-server-cloudimg-amd64.raw.gz"
      doGrowPart: true
      doUserAndSshSetup: true
      rootfsPartitionNumber: "1"
    
    "armbian-rpardini-rockpro64-edge-uboot":
      enabled: true
      arch: "aarch64"
      downloadURL: "https://github.com/armsurvivors/armbian-release/releases/download/24.03.24-armsurvivors-45/Armbian-unofficial_24.03.24-armsurvivors-45_Rockpro64_bookworm_edge_6.7.10.img.xz"
      image: "Armbian-unofficial_24.03.24-armsurvivors-45_Rockpro64_bookworm_edge_6.7.10.img.xz"
      conversion: "none"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      rootfsPartitionNumber: "1"
    
    "armbian-rpardini-rpi4b-current-not-efi":
      enabled: true
      arch: "aarch64"
      downloadURL: "https://github.com/armsurvivors/armbian-release/releases/download/24.03.24-armsurvivors-45/Armbian-unofficial_24.03.24-armsurvivors-45_Rpi4b_bookworm_current_6.6.22.img.xz"
      image: "Armbian-unofficial_24.03.24-armsurvivors-45_Rpi4b_bookworm_current_6.6.22.img.xz"
      conversion: "none"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      rootfsPartitionNumber: "2" # rpi image has a fat32 boot partition (config.txt and such), and partition 2 is the real ext4 rootfs
    
    "armbian-bookworm-meson64-current-cloud":
      enabled: false
      arch: "aarch64"
      downloadURL: "https://..../"
      image: "armbian-bookworm-meson64.img"
      rootfsPartitionNumber: "1"

# Generates CRs triplets with Hardware, Workflow, and Template, using by-id references to the hook and images above.

hardware:
  common:
    uefi: true
    ipv4:
      gateway: "192.168.66.1" # Must be set, otherwise no internet access; can be overriden per-device
      netmask: "255.255.255.0"
      dns: [ "192.168.66.1" ]

  devices: # One entry for each machine

    "vm01":
      arch: aarch64
      mac: "52:54:00:01:03:01"
      rootDisk: "/dev/vdb"
      ipv4:
        address: "192.168.66.244"
      hookRef: "armbian-uefi-arm64-edge" # "default-hook-aarch64" # defined above
      imageRef: "ubuntu-jammy-cloud-arm64" # defined above
      extraKernelCommandLine: "console=ttyAMA0"

    "vm03":
      arch: aarch64
      mac: "52:54:00:01:03:03"
      rootDisk: "/dev/vdb"
      ipv4:
        address: "192.168.66.246"
      #hookRef: "new-hook-aarch64" # defined above
      hookRef: "armbian-uefi-arm64-edge" # "default-hook-aarch64" # defined above
      imageRef: "ubuntu-jammy-cloud-arm64" # defined above
      extraKernelCommandLine: "console=ttyAMA0"

    "vm02":
      arch: x86_64
      mac: "52:54:00:01:03:02"
      rootDisk: "/dev/vdb"
      ipv4:
        address: "192.168.66.245"
      hookRef: "armbian-uefi-x86-edge" # "default-hook-amd64" # defined above
      imageRef: "ubuntu-jammy-cloud-amd64" # defined above
      extraKernelCommandLine: "console=ttyS0"
    
    "run-qemu-x86":
      arch: x86_64
      mac: "11:22:33:44:55:66"
      rootDisk: "/dev/sda"
      ipv4:
        address: "192.168.66.245"
      hookRef: "armbian-uefi-x86-edge" # "default-hook-amd64" # defined above
      imageRef: "ubuntu-jammy-cloud-amd64" # defined above
      extraKernelCommandLine: "console=ttyS0"

    "run-qemu-arm64":
      arch: aarch64
      mac: "11:22:33:44:55:77"
      rootDisk: "/dev/vda" # wonder why linuxkit only uses virtio for arm64? intel is sda...
      ipv4:
        address: "192.168.66.249"
      hookRef: "armbian-uefi-arm64-edge" # "default-hook-aarch64" # defined above
      imageRef: "ubuntu-jammy-cloud-arm64" # defined above
      extraKernelCommandLine: "console=ttyAMA0"
    
    "vim3l":
      arch: aarch64
      mac: "c8:63:14:71:2a:6d"
      rootDisk: "/dev/mmcblk0"
      ipv4:
        address: "192.168.66.246"
      hookRef: "armbian-meson64-edge" # "armbian-uefi-current-arm64" # "default-hook-aarch64" #  # "armbian-meson64-current" #  # defined above
      imageRef: "ubuntu-jammy-cloud-arm64" # defined above
      extraKernelCommandLine: "console=ttyAML0,115200"
    
    "rockpro64":
      arch: aarch64
      mac: "2a:36:cb:a2:ae:b8"
      #rootDisk: "/dev/mmcblk2"  # mmcblk2 is the eMMC, mmcblk1 is the SD card
      rootDisk: "/dev/disk/by-id/mmc-AJTD4R_0x0b05e84d" # much safer to use this style
      ipv4:
        address: "192.168.66.247"
      hookRef: "armbian-rockchip64-edge" # defined above
      imageRef: "armbian-rpardini-rockpro64-edge-uboot" # defined above
      extraKernelCommandLine: "console=ttyS2,1500000"
    
    "rpi4b":
      arch: aarch64
      mac: "dc:a6:32:ec:8b:49"
      rootDisk: "/dev/disk/by-id/wwn-0x3001237923792379"
      ipv4:
        address: "192.168.66.248"
      hookRef: "armbian-bcm2711-current" # works, as long as UEFI is set with ACPI+DTB and no 3gb limit. Use edk2 from https://github.com/pftf/RPi4
      imageRef: "armbian-rpardini-rpi4b-current-not-efi" # defined above
      extraKernelCommandLine: "console=tty1 console=ttyAMA0,115200 loglevel=7" # Last console defined "wins", thus use tty1 last if no serial console
