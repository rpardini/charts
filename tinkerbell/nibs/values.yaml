stack:
  stack:
    loadBalancerIP: 192.168.66.75 # MUST be set
  hegel:
    trustedProxies: [ "0.0.0.0/0" ] # Trust _all_ proxies, insecure
  smee:
    trustedProxies: [ "0.0.0.0/0" ] # Trust _all_ proxies, insecure
    publicIP: 192.168.66.75 # Must be set
    image: quay.io/tinkerbellrpardini/smee:latest-rpardini # custom build with updated ipxedust and arm64 NAPNULL for u-boot's PXE-via-EFI
    imagePullPolicy: Always # I re-push it there sometimes


actions:
  repository: "quay.io/tinkerbellrpardini/actions"
  version: "latest"

# Generates download jobs and configs for easy show-off'ing of Tinkerbell on diverse hardware
provision:
  
  # Define one key per hook built to be downloaded and made available. Those _must_ match the hardware definitions
  hook:
    "default-hook-amd64":
      arch: "x86_64"
      downloadURL: null  # Matches the default hook download in stack chart
      kernel: "vmlinuz-x86_64"
      initrd: "initramfs-x86_64"
      kernelCommandLine: ""
      bootMode: kexec

    "armbian-uefi-current-amd64":
      arch: "x86_64"
      downloadURL: null # @TODO put there by scp'ing for now
      kernel: "vmlinuz-armbian-uefi-current-amd64"
      initrd: "initramfs-armbian-uefi-current-amd64"
      kernelCommandLine: "intel_iommu=on iommu=pt"
      bootMode: kexec
    
    
    "default-hook-aarch64":
      arch: "aarch64"
      downloadURL: null # Matches the default hook download in stack chart
      kernel: "vmlinuz-aarch64"
      initrd: "initramfs-aarch64"
      kernelCommandLine: ""
      bootMode: reboot # kexec is no-go here, kernel problem? (persists after enabling CONFIG_KEXEC & trying to fix TB action)

    "armbian-uefi-current-arm64":
      arch: "aarch64"
      downloadURL: null # @TODO put there by scp'ing for now
      kernel: "vmlinuz-armbian-uefi-current-arm64"
      initrd: "initramfs-armbian-uefi-current-arm64"
      kernelCommandLine: ""
      bootMode: reboot # still no go with kexec -- this is a TB action problem for sure, not kernel problem
    
    "armbian-meson64-current":
      arch: "aarch64"
      downloadURL: null # @TODO put there by scp'ing for now
      kernel: "vmlinuz-armbian-meson64-current"
      initrd: "initramfs-armbian-meson64-current"
      kernelCommandLine: "acpi=off efi=noruntime"
      bootMode: reboot
  
    "armbian-meson64-edge":
      arch: "aarch64"
      downloadURL: null # @TODO put there by scp'ing for now
      kernel: "vmlinuz-armbian-meson64-edge"
      initrd: "initramfs-armbian-meson64-edge"
      kernelCommandLine: "acpi=off efi=noruntime"
      bootMode: reboot
  
  
  
  
  # Define deployment images; we've a few examples using Ubuntu and Armbian
  images:
    "ubuntu-jammy-cloud-arm64":
      enabled: true
      arch: "aarch64"
      downloadURL: "https://cloud-images.ubuntu.com/daily/server/jammy/current/jammy-server-cloudimg-arm64.img"
      image: "jammy-server-cloudimg-arm64.raw.gz"
    "ubuntu-jammy-cloud-amd64":
      enabled: true
      arch: "x86_64"
      downloadURL: "https://cloud-images.ubuntu.com/daily/server/jammy/current/jammy-server-cloudimg-amd64.img"
      image: "jammy-server-cloudimg-amd64.raw.gz"
    "armbian-bookworm-meson64-current-cloud":
      enabled: false
      arch: "aarch64"
      downloadURL: "https://..../"
      image: "armbian-bookworm-meson64.img"

# Generates CRs triplets with Hardware, Workflow, and Template, using by-id references to the hook and images above.

hardware:
  common:
    uefi: true
    ipv4:
      gateway: "192.168.66.1" # Must be set, otherwise no internet access; can be overriden per-device
      netmask: "255.255.255.0"
      dns: [ "192.168.66.1" ]

  devices: # One entry for each machine

    "vm01":
      arch: aarch64
      mac: "52:54:00:01:03:01"
      disks: [ "/dev/vdb" ]
      ipv4:
        address: "192.168.66.244"
      hookRef: "armbian-uefi-current-arm64" # "default-hook-aarch64" # defined above
      imageRef: "ubuntu-jammy-cloud-arm64" # defined above
      extraKernelCommandLine: "console=ttyAMA0"

    "vm03":
      arch: aarch64
      mac: "52:54:00:01:03:03"
      disks: [ "/dev/vdb" ]
      ipv4:
        address: "192.168.66.246"
      #hookRef: "new-hook-aarch64" # defined above
      hookRef: "armbian-uefi-current-arm64" # "default-hook-aarch64" # defined above
      imageRef: "ubuntu-jammy-cloud-arm64" # defined above
      extraKernelCommandLine: "console=ttyAMA0"

    "vm02":
      arch: x86_64
      mac: "52:54:00:01:03:02"
      disks: [ "/dev/vdb" ]
      ipv4:
        address: "192.168.66.245"
      hookRef: "armbian-uefi-current-amd64" # "default-hook-amd64" # defined above
      imageRef: "ubuntu-jammy-cloud-amd64" # defined above
      extraKernelCommandLine: "console=ttyS0"
    
    "vim3l":
      arch: aarch64
      mac: "c8:63:14:71:2a:6d"
      disks: [ "/dev/mmcblk0" ]
      ipv4:
        address: "192.168.66.246"
      hookRef: "armbian-meson64-edge" # "armbian-uefi-current-arm64" # "default-hook-aarch64" #  # "armbian-meson64-current" #  # defined above
      imageRef: "ubuntu-jammy-cloud-arm64" # defined above
      extraKernelCommandLine: "console=ttyAML0,115200"
      
      #"vim3l2":
      #  arch: aarch64
      #  mac: "c8:63:14:71:2a:6d"
      #  disks: [ "/dev/mmcblk0" ]
      #  ipv4:
      #    address: "192.168.66.246"
      #  hookRef: "default-hook-aarch64" # defined above
      #  imageRef: "ubuntu-jammy-cloud-arm64" # defined above
      #  extraKernelCommandLine: "console=ttyAMA0"
      